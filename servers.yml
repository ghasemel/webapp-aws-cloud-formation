AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Ghasem Elyasi / Udacity DevOps Cloud Engineer - Project II
  This template deploys a webapp similar to Instagram on AWS.

Parameters:
  myEnvName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  myGeneralCIDR:
    Description: General CIDR
    Type: String

  myWebAppPort:
    Description: WebApp Port on Instances
    Type: Number

  myUdagramPort:
    Description: LoadBalancer port for inbound traffic
    Type: Number

  myWebAppHealthCheckPort:
    Description: WebApp health check port
    Type: Number

  myHealthCheckInterval:
    Description: Health Check Interval
    Type: Number

  myHealthCheckPath:
    Description: Health Check Path
    Type: String

  myHealthCheckProtocol:
    Description: WebApp health check port
    Type: String

  myHealthCheckTimeout:
    Description: Health Check Timeout
    Type: Number

  myHealthyThresholdCount:
    Description: Healthy Threshold Count
    Type: Number

  myUnhealthyThresholdCount:
    Description: Unhealthy Threshold Count
    Type: Number

  myAutoScalingGroupMinInstances:
    Description: Auto Scaling Group Min Instances Size
    Type: Number

  myAutoScalingGroupMaxInstances:
    Description: Auto Scaling Group Max Instances Size
    Type: Number

  myLoadBalancerProtocol:
    Description: Load Balancer Protocol
    Type: String

  myWebAppProtocol:
    Description: WebApp Protocol
    Type: String

Resources:
  # IAM Role to access S3 bucket
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      Description: Allows EC2 instances to call AWS services on your behalf.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Tags:
        - Key: Name
          Value: !Sub ${myEnvName} IAM role for readonly access to S3

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  # SecurityGroup of the web app
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and ssh to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue: !Sub "${myEnvName}-VPCID"
      SecurityGroupIngress:
        - CidrIp: !Ref myGeneralCIDR
          IpProtocol: tcp
          FromPort: !Ref myWebAppPort
          ToPort: !Ref myWebAppPort
        - CidrIp: !Ref myGeneralCIDR
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      SecurityGroupEgress:
        - CidrIp: !Ref myGeneralCIDR
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535

  # WebApp Launch Configuration
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      ImageId: ami-005bdb005fb00e791
      InstanceType: t3.medium
      SecurityGroups:
        - !Ref WebAppSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sdk
          Ebs:
            VolumeSize: "10"      
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
          rm udacity.zip

  # WebApp Auto Scaling Group
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${myEnvName}-PRIV-NETS"
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: !Ref myAutoScalingGroupMinInstances
      MaxSize: !Ref myAutoScalingGroupMaxInstances      
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  # load balancer SecurityGroup
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${myEnvName}-VPCID"
      SecurityGroupIngress:
        - CidrIp: !Ref myGeneralCIDR
          IpProtocol: tcp
          FromPort: !Ref myUdagramPort
          ToPort: !Ref myUdagramPort
      SecurityGroupEgress:
        - CidrIp: !Ref myGeneralCIDR
          IpProtocol: tcp
          FromPort: !Ref myWebAppPort
          ToPort: !Ref myWebAppPort
  
  # load balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub "${myEnvName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${myEnvName}-PUB2-SN"

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref myUdagramPort
      Protocol: !Ref myLoadBalancerProtocol

  LoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  # target group
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: !Ref myHealthCheckInterval
      HealthCheckPath: !Ref myHealthCheckPath
      HealthCheckPort: !Ref myWebAppHealthCheckPort
      HealthCheckProtocol: !Ref myHealthCheckProtocol
      HealthCheckTimeoutSeconds: !Ref myHealthCheckTimeout
      HealthyThresholdCount: !Ref myHealthyThresholdCount
      Port: !Ref myWebAppPort
      Protocol: !Ref myWebAppProtocol
      TargetType: instance
      UnhealthyThresholdCount: !Ref myUnhealthyThresholdCount
      VpcId:
        Fn::ImportValue: !Sub "${myEnvName}-VPCID"

  # Automatic Scaling Policies
  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebAppAutoScalingGroup
      Cooldown: "120"
      PolicyType: SimpleScaling
      ScalingAdjustment: 1

  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebAppAutoScalingGroup
      Cooldown: "120"
      PolicyType: SimpleScaling
      ScalingAdjustment: -1

  # CloudWatch Alarms to trigger the scaling policies
  CpuHighUsageCloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Period: 60
      Threshold: 50
      AlarmActions:
        - !Ref ScaleOutPolicy
      AlarmDescription: To alarm when cpu usage of all instances is greater than the threshold
      DatapointsToAlarm: 1
      Statistic: Average

  CpuLowUsageCloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 1
      Period: 60
      Threshold: 30
      AlarmActions:
        - !Ref ScaleInPolicy
      AlarmDescription: To alarm when cpu usage of all instances is less than the threshold
      DatapointsToAlarm: 1
      Statistic: Average

# outputs
Outputs:
  LoadBalancerDNS:
    Description: Load balnacer DNS name
    Value:
      Fn::Sub:
        - "${myLoadBalancerProtocol}://${dns}"
        - { dns: !GetAtt LoadBalancer.DNSName }
    Export:
      Name: !Sub ${myEnvName}-LB-DNS

  LoadBalancerInboundPort:
    Description: Inbound port of load balancer
    Value: !Ref myUdagramPort
    Export:
      Name: !Sub ${myEnvName}-LB-INBOUND-PORT

  LoadBalancerProtocol:
    Description: Load Balancer Protocol
    Value: !Ref myLoadBalancerProtocol
    Export:
      Name: !Sub ${myEnvName}-LB-PROTOCOL

  WebAppInboundPort:
    Description: Inbound port of the WebApp
    Value: !Ref myWebAppPort
    Export:
      Name: !Sub ${myEnvName}-WEBAPP-INBOUND-PORT

  WebAppProtocol:
    Description: WebApp Protocol
    Value: !Ref myWebAppProtocol
    Export:
      Name: !Sub ${myEnvName}-WEBAPP-PROTOCOL

  AutoScalingGroupMinInstances:
    Description: Auto Scaling Group Minimum Instances
    Value: !Ref myAutoScalingGroupMinInstances
    Export:
      Name: !Sub ${myEnvName}-AUTO-SCALING-MIN-INSTANCES

  AutoScalingGroupMaxInstances:
    Description: Auto Scaling Group Maximum Instances
    Value: !Ref myAutoScalingGroupMaxInstances
    Export:
      Name: !Sub ${myEnvName}-AUTO-SCALING-MAX-INSTANCES

  HealthCheckPath:
    Description: Health Check Path
    Value: !Ref myHealthCheckPath
    Export:
      Name: !Sub ${myEnvName}-HEALTH-CHECK-PATH

  HealthCheckProtocol:
    Description: Health Check Protocol
    Value: !Ref myHealthCheckProtocol
    Export:
      Name: !Sub ${myEnvName}-HEALTH-CHECK-PROTOCOL

  HealthCheckInterval:
    Description: Health Check Interval
    Value: !Ref myHealthCheckInterval
    Export:
      Name: !Sub ${myEnvName}-HEALTH-CHECK-INTERVAL